{"ast":null,"code":"var Classes = Object.create(null);\n/**\r\n * Create a new Connection instance.\r\n * @param {object|string} config Configuration or connection string for new MySQL connection\r\n * @return {Connection} A new MySQL connection\r\n * @public\r\n */\n\nexports.createConnection = function createConnection(config) {\n  var Connection = loadClass('Connection');\n  var ConnectionConfig = loadClass('ConnectionConfig');\n  return new Connection({\n    config: new ConnectionConfig(config)\n  });\n};\n/**\r\n * Create a new Pool instance.\r\n * @param {object|string} config Configuration or connection string for new MySQL connections\r\n * @return {Pool} A new MySQL pool\r\n * @public\r\n */\n\n\nexports.createPool = function createPool(config) {\n  var Pool = loadClass('Pool');\n  var PoolConfig = loadClass('PoolConfig');\n  return new Pool({\n    config: new PoolConfig(config)\n  });\n};\n/**\r\n * Create a new PoolCluster instance.\r\n * @param {object} [config] Configuration for pool cluster\r\n * @return {PoolCluster} New MySQL pool cluster\r\n * @public\r\n */\n\n\nexports.createPoolCluster = function createPoolCluster(config) {\n  var PoolCluster = loadClass('PoolCluster');\n  return new PoolCluster(config);\n};\n/**\r\n * Create a new Query instance.\r\n * @param {string} sql The SQL for the query\r\n * @param {array} [values] Any values to insert into placeholders in sql\r\n * @param {function} [callback] The callback to use when query is complete\r\n * @return {Query} New query object\r\n * @public\r\n */\n\n\nexports.createQuery = function createQuery(sql, values, callback) {\n  var Connection = loadClass('Connection');\n  return Connection.createQuery(sql, values, callback);\n};\n/**\r\n * Escape a value for SQL.\r\n * @param {*} value The value to escape\r\n * @param {boolean} [stringifyObjects=false] Setting if objects should be stringified\r\n * @param {string} [timeZone=local] Setting for time zone to use for Date conversion\r\n * @return {string} Escaped string value\r\n * @public\r\n */\n\n\nexports.escape = function escape(value, stringifyObjects, timeZone) {\n  var SqlString = loadClass('SqlString');\n  return SqlString.escape(value, stringifyObjects, timeZone);\n};\n/**\r\n * Escape an identifier for SQL.\r\n * @param {*} value The value to escape\r\n * @param {boolean} [forbidQualified=false] Setting to treat '.' as part of identifier\r\n * @return {string} Escaped string value\r\n * @public\r\n */\n\n\nexports.escapeId = function escapeId(value, forbidQualified) {\n  var SqlString = loadClass('SqlString');\n  return SqlString.escapeId(value, forbidQualified);\n};\n/**\r\n * Format SQL and replacement values into a SQL string.\r\n * @param {string} sql The SQL for the query\r\n * @param {array} [values] Any values to insert into placeholders in sql\r\n * @param {boolean} [stringifyObjects=false] Setting if objects should be stringified\r\n * @param {string} [timeZone=local] Setting for time zone to use for Date conversion\r\n * @return {string} Formatted SQL string\r\n * @public\r\n */\n\n\nexports.format = function format(sql, values, stringifyObjects, timeZone) {\n  var SqlString = loadClass('SqlString');\n  return SqlString.format(sql, values, stringifyObjects, timeZone);\n};\n/**\r\n * Wrap raw SQL strings from escape overriding.\r\n * @param {string} sql The raw SQL\r\n * @return {object} Wrapped object\r\n * @public\r\n */\n\n\nexports.raw = function raw(sql) {\n  var SqlString = loadClass('SqlString');\n  return SqlString.raw(sql);\n};\n/**\r\n * The type constants.\r\n * @public\r\n */\n\n\nObject.defineProperty(exports, 'Types', {\n  get: loadClass.bind(null, 'Types')\n});\n/**\r\n * Load the given class.\r\n * @param {string} className Name of class to default\r\n * @return {function|object} Class constructor or exports\r\n * @private\r\n */\n\nfunction loadClass(className) {\n  var Class = Classes[className];\n\n  if (Class !== undefined) {\n    return Class;\n  } // This uses a switch for static require analysis\n\n\n  switch (className) {\n    case 'Connection':\n      Class = require('./lib/Connection');\n      break;\n\n    case 'ConnectionConfig':\n      Class = require('./lib/ConnectionConfig');\n      break;\n\n    case 'Pool':\n      Class = require('./lib/Pool');\n      break;\n\n    case 'PoolCluster':\n      Class = require('./lib/PoolCluster');\n      break;\n\n    case 'PoolConfig':\n      Class = require('./lib/PoolConfig');\n      break;\n\n    case 'SqlString':\n      Class = require('./lib/protocol/SqlString');\n      break;\n\n    case 'Types':\n      Class = require('./lib/protocol/constants/types');\n      break;\n\n    default:\n      throw new Error('Cannot find class \\'' + className + '\\'');\n  } // Store to prevent invoking require()\n\n\n  Classes[className] = Class;\n  return Class;\n}","map":{"version":3,"sources":["C:/inetpub/wwwroot/ThesisProject/node_modules/mysql/index.js"],"names":["Classes","Object","create","exports","createConnection","config","Connection","loadClass","ConnectionConfig","createPool","Pool","PoolConfig","createPoolCluster","PoolCluster","createQuery","sql","values","callback","escape","value","stringifyObjects","timeZone","SqlString","escapeId","forbidQualified","format","raw","defineProperty","get","bind","className","Class","undefined","require","Error"],"mappings":"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","sourcesContent":["var Classes = Object.create(null);\r\n\r\n/**\r\n * Create a new Connection instance.\r\n * @param {object|string} config Configuration or connection string for new MySQL connection\r\n * @return {Connection} A new MySQL connection\r\n * @public\r\n */\r\nexports.createConnection = function createConnection(config) {\r\n  var Connection       = loadClass('Connection');\r\n  var ConnectionConfig = loadClass('ConnectionConfig');\r\n\r\n  return new Connection({config: new ConnectionConfig(config)});\r\n};\r\n\r\n/**\r\n * Create a new Pool instance.\r\n * @param {object|string} config Configuration or connection string for new MySQL connections\r\n * @return {Pool} A new MySQL pool\r\n * @public\r\n */\r\nexports.createPool = function createPool(config) {\r\n  var Pool       = loadClass('Pool');\r\n  var PoolConfig = loadClass('PoolConfig');\r\n\r\n  return new Pool({config: new PoolConfig(config)});\r\n};\r\n\r\n/**\r\n * Create a new PoolCluster instance.\r\n * @param {object} [config] Configuration for pool cluster\r\n * @return {PoolCluster} New MySQL pool cluster\r\n * @public\r\n */\r\nexports.createPoolCluster = function createPoolCluster(config) {\r\n  var PoolCluster = loadClass('PoolCluster');\r\n\r\n  return new PoolCluster(config);\r\n};\r\n\r\n/**\r\n * Create a new Query instance.\r\n * @param {string} sql The SQL for the query\r\n * @param {array} [values] Any values to insert into placeholders in sql\r\n * @param {function} [callback] The callback to use when query is complete\r\n * @return {Query} New query object\r\n * @public\r\n */\r\nexports.createQuery = function createQuery(sql, values, callback) {\r\n  var Connection = loadClass('Connection');\r\n\r\n  return Connection.createQuery(sql, values, callback);\r\n};\r\n\r\n/**\r\n * Escape a value for SQL.\r\n * @param {*} value The value to escape\r\n * @param {boolean} [stringifyObjects=false] Setting if objects should be stringified\r\n * @param {string} [timeZone=local] Setting for time zone to use for Date conversion\r\n * @return {string} Escaped string value\r\n * @public\r\n */\r\nexports.escape = function escape(value, stringifyObjects, timeZone) {\r\n  var SqlString = loadClass('SqlString');\r\n\r\n  return SqlString.escape(value, stringifyObjects, timeZone);\r\n};\r\n\r\n/**\r\n * Escape an identifier for SQL.\r\n * @param {*} value The value to escape\r\n * @param {boolean} [forbidQualified=false] Setting to treat '.' as part of identifier\r\n * @return {string} Escaped string value\r\n * @public\r\n */\r\nexports.escapeId = function escapeId(value, forbidQualified) {\r\n  var SqlString = loadClass('SqlString');\r\n\r\n  return SqlString.escapeId(value, forbidQualified);\r\n};\r\n\r\n/**\r\n * Format SQL and replacement values into a SQL string.\r\n * @param {string} sql The SQL for the query\r\n * @param {array} [values] Any values to insert into placeholders in sql\r\n * @param {boolean} [stringifyObjects=false] Setting if objects should be stringified\r\n * @param {string} [timeZone=local] Setting for time zone to use for Date conversion\r\n * @return {string} Formatted SQL string\r\n * @public\r\n */\r\nexports.format = function format(sql, values, stringifyObjects, timeZone) {\r\n  var SqlString = loadClass('SqlString');\r\n\r\n  return SqlString.format(sql, values, stringifyObjects, timeZone);\r\n};\r\n\r\n/**\r\n * Wrap raw SQL strings from escape overriding.\r\n * @param {string} sql The raw SQL\r\n * @return {object} Wrapped object\r\n * @public\r\n */\r\nexports.raw = function raw(sql) {\r\n  var SqlString = loadClass('SqlString');\r\n\r\n  return SqlString.raw(sql);\r\n};\r\n\r\n/**\r\n * The type constants.\r\n * @public\r\n */\r\nObject.defineProperty(exports, 'Types', {\r\n  get: loadClass.bind(null, 'Types')\r\n});\r\n\r\n/**\r\n * Load the given class.\r\n * @param {string} className Name of class to default\r\n * @return {function|object} Class constructor or exports\r\n * @private\r\n */\r\nfunction loadClass(className) {\r\n  var Class = Classes[className];\r\n\r\n  if (Class !== undefined) {\r\n    return Class;\r\n  }\r\n\r\n  // This uses a switch for static require analysis\r\n  switch (className) {\r\n    case 'Connection':\r\n      Class = require('./lib/Connection');\r\n      break;\r\n    case 'ConnectionConfig':\r\n      Class = require('./lib/ConnectionConfig');\r\n      break;\r\n    case 'Pool':\r\n      Class = require('./lib/Pool');\r\n      break;\r\n    case 'PoolCluster':\r\n      Class = require('./lib/PoolCluster');\r\n      break;\r\n    case 'PoolConfig':\r\n      Class = require('./lib/PoolConfig');\r\n      break;\r\n    case 'SqlString':\r\n      Class = require('./lib/protocol/SqlString');\r\n      break;\r\n    case 'Types':\r\n      Class = require('./lib/protocol/constants/types');\r\n      break;\r\n    default:\r\n      throw new Error('Cannot find class \\'' + className + '\\'');\r\n  }\r\n\r\n  // Store to prevent invoking require()\r\n  Classes[className] = Class;\r\n\r\n  return Class;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}