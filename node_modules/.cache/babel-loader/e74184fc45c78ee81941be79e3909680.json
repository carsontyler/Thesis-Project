{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\nimport * as React from 'react';\n/**\r\n * This is a helper function for when a component needs to be able to forward a ref\r\n * to a child component, but still needs to have access to that component as part of\r\n * its implementation.\r\n *\r\n * Its main use case is in wrappers for native components.\r\n *\r\n * Usage:\r\n *\r\n *   function MyView(props) {\r\n *     const ref = useRef(null);\r\n *\r\n *     function setRef = setAndForwardRef({\r\n *       getForwardedRef: () => props.forwardedRef,\r\n *       setLocalRef: localRef => {\r\n *         ref.current = localRef;\r\n *       },\r\n *     });\r\n *\r\n *     return <View ref={setRef} />;\r\n *   }\r\n *\r\n *   const MyViewWithRef = React.forwardRef((props, ref) => (\r\n *     <MyView {...props} forwardedRef={ref} />\r\n *   ));\r\n */\n\nexport default function setAndForwardRef(_ref) {\n  var getForwardedRef = _ref.getForwardedRef,\n      setLocalRef = _ref.setLocalRef;\n  return function forwardRef(ref) {\n    var forwardedRef = getForwardedRef();\n    setLocalRef(ref); // Forward to user ref prop (if one has been specified)\n\n    if (typeof forwardedRef === 'function') {\n      // Handle function-based refs. String-based refs are handled as functions.\n      forwardedRef(ref);\n    } else if (typeof forwardedRef === 'object' && forwardedRef != null) {\n      // Handle createRef-based refs\n      forwardedRef.current = ref;\n    }\n  };\n}","map":{"version":3,"sources":["C:/inetpub/wwwroot/ThesisProject/node_modules/react-native-web/dist/modules/setAndForwardRef/index.js"],"names":["React","setAndForwardRef","_ref","getForwardedRef","setLocalRef","forwardRef","ref","forwardedRef","current"],"mappings":"AAAA;;;;;;;;AAQA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,eAAe,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAC7C,MAAIC,eAAe,GAAGD,IAAI,CAACC,eAA3B;AAAA,MACIC,WAAW,GAAGF,IAAI,CAACE,WADvB;AAEA,SAAO,SAASC,UAAT,CAAoBC,GAApB,EAAyB;AAC9B,QAAIC,YAAY,GAAGJ,eAAe,EAAlC;AACAC,IAAAA,WAAW,CAACE,GAAD,CAAX,CAF8B,CAEZ;;AAElB,QAAI,OAAOC,YAAP,KAAwB,UAA5B,EAAwC;AACtC;AACAA,MAAAA,YAAY,CAACD,GAAD,CAAZ;AACD,KAHD,MAGO,IAAI,OAAOC,YAAP,KAAwB,QAAxB,IAAoCA,YAAY,IAAI,IAAxD,EAA8D;AACnE;AACAA,MAAAA,YAAY,CAACC,OAAb,GAAuBF,GAAvB;AACD;AACF,GAXD;AAYD","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\r\nimport * as React from 'react';\r\n\r\n/**\r\n * This is a helper function for when a component needs to be able to forward a ref\r\n * to a child component, but still needs to have access to that component as part of\r\n * its implementation.\r\n *\r\n * Its main use case is in wrappers for native components.\r\n *\r\n * Usage:\r\n *\r\n *   function MyView(props) {\r\n *     const ref = useRef(null);\r\n *\r\n *     function setRef = setAndForwardRef({\r\n *       getForwardedRef: () => props.forwardedRef,\r\n *       setLocalRef: localRef => {\r\n *         ref.current = localRef;\r\n *       },\r\n *     });\r\n *\r\n *     return <View ref={setRef} />;\r\n *   }\r\n *\r\n *   const MyViewWithRef = React.forwardRef((props, ref) => (\r\n *     <MyView {...props} forwardedRef={ref} />\r\n *   ));\r\n */\r\nexport default function setAndForwardRef(_ref) {\r\n  var getForwardedRef = _ref.getForwardedRef,\r\n      setLocalRef = _ref.setLocalRef;\r\n  return function forwardRef(ref) {\r\n    var forwardedRef = getForwardedRef();\r\n    setLocalRef(ref); // Forward to user ref prop (if one has been specified)\r\n\r\n    if (typeof forwardedRef === 'function') {\r\n      // Handle function-based refs. String-based refs are handled as functions.\r\n      forwardedRef(ref);\r\n    } else if (typeof forwardedRef === 'object' && forwardedRef != null) {\r\n      // Handle createRef-based refs\r\n      forwardedRef.current = ref;\r\n    }\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}